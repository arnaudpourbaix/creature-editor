Name;TobEx;Params;Label
ActionOverride;false;O:Actor,A:Action;This action can be used to control another creature. A creature referenced as the result of SetTokenObject is not a valid target for the ActionOverride action. The following is from the Irenicus cutscene after leaving his abode in chapter 1. 
Activate;false;O:Object;This action activates the target creature. The creature is returned to play - i.e. it is visible and can be interacted with. 
AddAreaFlag;false;I:TypeAREAFLAG;This action will add area flags (e.g. save enabled, tutorial) to the current area. The area flags value is OR'd, so multiple values can be set. Values are from areaflag.ids. 
AddAreaType;false;I:TypeAREATYPE;This action will add area type flags (e.g. outdoor, dungeon) to the current area. The areatype value is OR'd, so multiple values can be set. Values are from areatype.ids 
AddexperienceParty;false;I:XP;This action gives the specified amount of experience to the party. The XP amount is distributed among all current living party members. The example script is from ar1300.bcs. 
AddexperiencePartyGlobal;false;S:Name,S:Area;This action adds experience to the party, with the amount corresponding to a global variable. 
AddFamiliar;false;null;This action causes the active creature to become the players ally. The active creature does not act as a normal familiar (i.e. no HP bonus or Constitution loss on death). 
AddGlobals;false;S:Name,S:Name2;This action will add the variable specified by parameter 2 onto the variable specified by parameter 1 
AddJournalEntry;false;I:Entry,I:TypeJourType;This action adds an entry into the journal. The entry parameter is the strref to add, and the JourType is the type of entry (i.e. the location within the journal to add the entry to) - values are from jourtype.ids. 
AddKit;false;I:KitKIT;This action removes the active creature's current kit and adds the specified kit. Abilities from any previous kit are removed. AddKit(0) can be used to remove a creatures current kit without adding a new one. Class restrictions apply for kits. When attempting adding an invalid kit, the existing kit (if any) will be replied. 
AddMapNote;false;P:Position,I:StringRef;This action will add a map note onto the current area's mini-map at the specified position. The position is a location on the actual area map (not the minimap). 
AddSpecialAbility;false;S:ResRef;This action adds the specified spell to the active creature. The message <creature_name> has gained a special ability: 'Ability' is displayed in the message log. 
AddSuperKit;false;I:KitKIT;This action sets the active creatures kit to the specified kit . Abilities from any previous kits are kept. Class restrictions apply for kits. When attempting adding an invalid kit, the existing kit (if any) will be replied. 
AddWayPoint;false;P:WayPoint;This action is used to set waypoints for a creature to move between. it is commonly used from area scripts to script barmaids moving in a route around the bar. The point parameter represents the X and Y coordinates of the waypoint to add. 
AddXP2DA;false;S:Column;This action gives a level dependent amount of XP to the party. The XP amount is listed in xplist.2da at the intersection of the party level (column) and quest row (the mis-named parameter). The default file lists the same XP value for all quests for all levels. 
AddXPObject;false;O:Object,I:XP;This action adds the specified amount of XP onto the specified object. 
Ally;false;null;This action changes the active creature's allegiance to ALLY (i.e. a green selection circle). 
AmbientActivate;false;O:Object,I:StateBOOLEAN;This action is used in conjunction with animations in ARE files. The action sets the enabled state of an animation (specified by the object parameter). 
AnkhegEmerge;false;null;This action is likely called directly by the engine, and is used to give ankegs give the appearance of emerging from the ground. Calling the action from script has no effect. 
AnkhegHide;false;null;This action is likely called directly by the engine, and is used to give ankegs give the appearance of burrowing into the ground. Calling the action from script has no effect. 
ApplyDamage;false;O:Object,I:Amount,I:TypeDMGTYPE;This action inflicts the specified amount of damage (of the specified type) on the target creature. 
ApplyDamagePercent;false;O:Object,I:Amount,I:TypeDMGTYPE;This action applies a percentage damage (of the specified damage type) to the target object. 
ApplySpell;false;O:Target,I:SpellSpell;This action causes the active creature to cast the specified spell at the target object. The spell is applied instantly. no casting animation is played. The spell cannot be interrupted. For the RES version of the action, the spell name can not consist of only numbers, should be written in upper case and should be no more than 7 characters long. The RES action applies the spell at the lowest casting level - the casting level of the originating creature is ignored. Note that for normal spellcasting the probability dice values for effects are rolled for each spell, whereas spells applied in the same scripting block by ApplySpell use a single dice value. 
ApplySpellRES;false;S:ResRef,O:Target;This action causes the active creature to cast the specified spell at the target object. The spell is applied instantly. no casting animation is played. The spell cannot be interrupted. For the RES version of the action, the spell name can not consist of only numbers, should be written in upper case and should be no more than 7 characters long. The RES action applies the spell at the lowest casting level - the casting level of the originating creature is ignored. Note that for normal spellcasting the probability dice values for effects are rolled for each spell, whereas spells applied in the same scripting block by ApplySpell use a single dice value. 
AttachTransitionToDoor;false;S:GLOBAL,O:Object;This action is untested. It is likely that the first parameter refers to a transition trigger and the second parameter refers to a door type in an area. In this manner, the trigger is activated and deactivated based on the open state of the door. 
Attack;false;O:Target;This action instructs the active creature to continually attack the target, i.e. the active creature will not switch targets until its target is dead. 
AttackNoSound;false;O:Target;This action instructs the active creature to attack the target, without sounding a battlecry. 
AttackOneRound;false;O:Target;This action instructs the active creature to attack the specified target for one round.
AttackReevaluate;false;O:Target,I:ReevaluationPeriod;This action instructs the active creature to attack the target for the specified time (ReevaluationPeriod) which is measured in AI updates (which default to 15 per second).The script will then run again, checking for other true conditions. 
BackStab;false;O:Target;This action instructs the active creature to backstab the specified target. Note that some creatures (notably dragons and golems) are immune to being backstabbed, that not all weapons are valid to backstab with, and that the active creature must be hidden to make a successful backstab. This action causes the game to crash. As long as the correct conditions are met, the first attack of a hidden creature will count as a backstab attack. 
BanterBlockFlag;false;I:StateBoolean;This action dictates whether the banter timer can expire. 
BanterBlockTime;false;I:Time;This action extends the time taken for the banter timer to expire. The banter timers are hardcoded and every time one expires an NPC's b****.dlg is called. 
BashDoor;false;0:Object;This action is miscoded in the default action.ids file (the number 0 should be the capital letter O). When corrected, this action causes the active creature to attempt to bash the specified door. 
BattleSong;false;null;This action instructs the active creature to play their associated bard song. 
Berserk;false;null;This action has not been seen to produce any results. 
BreakInstants;false;null;This action has not been seen to produce any results. 
CallLightning;false;O:Target;This action calls lightning from the sky against the specified target, causing immediate death (unless the target has the MinHP effect applied). The lightning does not always show, and if it does, it is not always in the expected location. 
Calm;false;O:Object;This action reverses the effect of the Panic action, and may also remove other effects. 
ChangeAIScript;false;S:ScriptFile,I:LevelScrlev;This action changes the assigned script file for the active creature. The new script name is specified in the scriptfile parameter. The level parameter dictates the script level to change - values are from scrlev.ids. Scripts can be set for any scriptable object (container, creature, door etc.), but are not persisted. 
ChangeAIType;false;O:Object;This action changes the IDS identifiers for the active creature to the values specified. The object parameter must be in the IDS object form (i.e [EA.GENERAL.RACE.CLASS.SPECIFIC.GENDER.ALIGN]). If parameters are missing, they will default to 0. If a symbolic object is passed, all identifiers will be cleared and the IDS identifier bytes will be filled. ChangeAIType(NearestEnemyOf(LastSeenBy(LastTalkedToBy(LastTrigger())))) would zero Allegiance, General, Race, Class, Specific, Gender, and Alignment, set spec 1 to 'Myself' (the object.ids value, 1), 2 to LastTrigger, 3 to LastTalkedToBy, 4 to LastSeenBy, and 5 to NearestEnemyOf. 
ChangeAlignment;false;O:Object,I:ValueAlign;This action changes the alignment of the target creature to the specified value. Values are from align.ids.  
ChangeAnimation;false;S:ResRef;This action will change the animation of the active creature to match that of the specified CRE file. If the active creature is in the party, the action will create the specified creature. 
ChangeAnimationNoEffect;false;S:ResRef;This action will change the animation of the active creature to match that of the specified CRE file. If the active creature is in the party, the action will create the specified creature. No lighting effects are played. 
ChangeClass;false;O:Object,I:ValueClass;This action changes the class of the target creature to the specified value. Values are from class.ids. 
ChangeEnemyAlly;false;O:Object,I:ValueEA;This action changes the EA status of the target creature to the specified value. Values are from ea.ids. 
ChangeGender;false;O:Object,I:ValueGender;This action changes the gender of the target creature to the specified value. Values are from gender.ids.  
ChangeGeneral;false;O:Object,I:ValueGeneral;This action changes the general status of the target creature to the specified value. Values are from general.ids. 
ChangeRace;false;O:Object,I:ValueRace;This action changes the race of the target creature to the specified value. Values are from race.ids. 
ChangeSpecifics;false;O:Object,I:ValueSpecific;This action changes the specific status of the target creature to the specified value. Values are from specific.ids. The action produces inconsistent results when used on player characters in multiplayer games. The specific value is represented by one byte, and so is limited to values 0-255 
ChangeTileState;false;O:Tile,I:StateBoolean;This action sets the open/closed graphic of a tile in a WED file. 
ClearActions;false;O:Object;This action clears the action list of the specified object (including ModalActions).  
ClearAllActions;false;null;This action clears any queued actions for all creatures in the area. 
ClickLButtonObject;false;O:Target,I:ScrollSpeedScroll;This action has not been seen to produce any results. 
ClickLButtonPoint;false;P:Target,I:ScrollSpeedScroll;This action has not been seen to produce any results. 
ClickRButtonObject;false;O:Target,I:ScrollSpeedScroll;This action has not been seen to produce any results. 
ClickRButtonPoint;false;P:Target,I:ScrollSpeedScroll;This action has not been seen to produce any results. 
CloseDoor;false;O:Object;This action closes the specified door. The example script is from ar0300.bcs. 
ContainerEnable;false;O:Object,I:BoolBOOLEAN;This action is used in conjunction with containers in ARE files. The action sets the enabled state of a container (specified by the object parameter). 
Continue;false;null;This action instructs the script parser to continue looking for actions in the active creatures action list. This is mainly included in scripts for efficiency. Continue should also be appended to any script blocks added to the top of existing scripts, to ensure correct functioning of any blocks which include the OnCreation trigger. Continue may prevent actions being completed until the script parser has finished its execution cycle. Continue() must be the last command in an action list to function correctly. Use of continue in a script block will cause the parser to treater subsequent empty response blocks as though they contained a Continue() command - this parsing can be stopped by including a NoAction() in the empty response block. 
CopyGroundPilesTo;false;S:ResRef,P:Location;This action copies all items lying around on the ground in the current area to the specified point in the target area. 
CreateCreature;false;S:NewObject,P:Location,I:Face;This action is used to create a creature - either an NPC, a neutral creature or an enemy. NewObject is the filename of the creature to create, Location is the coordinates to create the creature at ([x.y] format) and direction being the direction the creature is facing (0-15, 0 being south and the facing values increasing as the character turns clockwise). Note that a coordinate of [-1.-1] will create the creature next to the active creature. 
CreateCreatureAtLocation;false;S:GLOBAL,S:Area,S:ResRef;This action creates the specified creature at the specified saved location. 
CreateCreatureCopyPoint;false;S:ResRef,O:Object,P:Dest;This action creates the specified creature at the specified point and sets its animation to that of the active creature. 
CreateCreatureDoor;false;S:NewObject,P:Location,I:Face;This action creates the specified creature at the specified location, and plays the dimension door graphic. The creature appears after approximately 100 AI cycles (~3.5 seconds at the default of 30 frame/second). 
CreateCreatureImpassable;false;S:NewObject,P:Location,I:Face;This action creates the specified creature on a normally impassable surface (e.g. on a wall, on water, on a roof). 
CreateCreatureImpassableAllowOverlap;false;S:NewObject,P:Location,I:Face;This action creates the specified creature at the specified location, facing the specified direction. The creature will be created even if the searchmap is marked as impassable, or whether there are any other obstructions. 
CreateCreatureObject;false;S:ResRef,O:Object,I:Usage1,I:Usage2,I:Usage3;This action will create the specified creature next to the specified object. The facing of the creature is controlled by the Usage1 parameter. 
CreateCreatureObjectCopy;false;S:ResRef,O:Object,I:Usage1,I:Usage2,I:Usage3;This action creates the specified creature and sets its animation to that of the active creature. 
CreateCreatureObjectCopyEffect;false;S:ResRef,S:Effect,O:Object;null
CreateCreatureObjectDoor;false;S:ResRef,O:Object,I:Usage1,I:Usage2,I:Usage3;This action will create the specified creature next to the specified object, and plays the dimension door graphic. The facing of the creature is controlled by the Usage1 parameter. The creature appears after approximately 100 AI cycles (~3.5 seconds at the default of 30 frame/second). 
CreateCreatureObjectEffect;false;S:ResRef,S:Effect,O:Object;null
CreateCreatureObjectOffScreen;false;S:ResRef,O:Object,I:Usage1,I:Usage2,I:Usage3;This action creates the specified creature just off-screen from the current viewpoint (the north/south/east/west direction is random). The facing of the creature is controlled by the Usage1 parameter. 
CreateCreatureObjectOffset;false;S:ResRef,O:Object,P:Offset;This action creates the specified creature at a location offset from the target object point. 
CreateCreatureOffScreen;false;S:ResRef,I:Face;This action creates the specified creature just offscreen from the active creature. 
CreateItem;false;S:ResRef,I:Usage1,I:Usage2,I:Usage3;This action creates the specified item (resref) on the active creature. The usage parameters determine the number of items created or the number of charges on the item, depending on the item type being created.  
CreateItemGlobal;false;S:Global,S:Area,S:ResRef;This action creates a quantity of items equal to a global variable on the active creature. 
CreateVisualEffect;false;S:Object,P:Location;This action plays the animation specified by the object parameter at the specified location ([x.y]). Animation preference order is applied, i.e. the engine first looks to play a VVC file of the specified name, if no such a file exists, the engine looks to play a BAM file of the specified. 
CreateVisualEffectObject;false;S:DialogFile,O:Target;This action plays the animation specified by the (mis-named) DialogFile parameter on the specified object. Animation preference order is applied, i.e. the engine first looks to play a VVC file of the specified name, if no such a file exists, the engine looks to play a BAM file of the specified. 
CutSceneId;false;O:Object;This action is used internally in a cutscene to make the object with the specified death variable perform actions. The action appears to only work from a creature script. 
DayNight;false;I:TimeOfDayTime;This action changes the time of day. The time parameter is taken from time.ids, though a direct number can be specified. The example script is from when Irenicus leaves his dungeon. 
Deactivate;false;O:Object;This action deactivates the target creature. The creature remains in the area, but is removed from play - i.e. it is invisible and cannot be interacted with. 
DeathMatchPositionArea;false;S:Areaname,P:Dest,I:Player;This action has not been seen to produce any results. It is likely they were used for the unimplemented multiplayer deathmatch mode. 
DeathMatchPositionGlobal;false;S:Areaname,P:Dest,I:Player;This action has not been seen to produce any results. It is likely they were used for the unimplemented multiplayer deathmatch mode. 
DeathMatchPositionLocal;false;S:Areaname,P:Dest,I:Player;This action has not been seen to produce any results. It is likely they were used for the unimplemented multiplayer deathmatch mode. 
DemoEnd;false;null;This action ends the demo and returns the player to the game selection screen. 
DestroyAllDestructableEquipment;false;null;This action destroys all destructible equipment on the active creature. Items flagged as indestructible (magical) will not be destroyed. 
DestroyAllEquipment;false;null;This action destroys all items on the active creature. 
DestroyGold;false;I:Gold;This action removes the specified amount of gold from the party. DestroyGold(0) will remove all gold from current creature. Note that this action affects the gold stat of the creature (not Party Gold or MISC07 items). 
DestroyItem;false;S:ResRef;This action removes a single instance of the specified item from the active creature, unless the item exists in a stack, in which case the entire stack is removed.
DestroySelf;false;null;This action removes the active creature from the game. No death variable is set. The example script is from the Irenicus cutscene at the beginning of the game. 
DetectSecretDoor;false;O:Object;This action will highlight the specified secret door in purple, to indicate it has been detected. 
Dialog;false;O:Object;This action instructs the active creature to initiate dialog with the target creature. Dialog will not be initiated if the creature using this action has been assigned a dialog that has all top level conditions returning false. 
DialogForceInterrupt;false;O:Object;These actions work the same as their counterpart dialog actions. The only difference is that they are important enough to interrupt other dialogs already in action. 
DialogInterrupt;false;I:StateBoolean;This action sets the interrupt state of the active creature. When set to false the creature cannot receive dialog requests or issue verbal constants. The interrupt state of a creature is not saved. 
Dialogue;false;O:Object;This action instructs the active creature to initiate dialog with the target creature. Dialog will not be initiated if the creature using this action has been assigned a dialog that has all top level conditions returning false. 
DialogueForceInterrupt;false;O:Object;These actions work the same as their counterpart dialog actions. The only difference is that they are important enough to interrupt other dialogs already in action. 
DialogueIncrementGlobal;true;S:Name,S:Area,I:Value;Increments the variable 'Name' in the scope 'Area' by 'Value' immediately instead of being added through the dialogue owner's action queue. This allows variables to be set instantaneously and checked immediately afterwards in the same dialogue. ActionOverride() is supported. If used outside dialogue, this action behaves exactly as IncrementGlobal(). 
DialogueInterrupt;false;I:StateBoolean;This action sets the interrupt state of the active creature. When set to false the creature cannot receive dialog requests or issue verbal constants. The interrupt state of a creature is not saved. 
DialogueSetGlobal;true;S:Name,S:Area,I:Value;Sets the variable 'Name' in the scope 'Area' to 'Value' immediately instead of being added through the dialogue owner's action queue. This allows variables to be set instantaneously and checked immediately afterwards in the same dialogue. ActionOverride() is supported. If used outside dialogue, this action behaves exactly as SetGlobal(). 
DialogueSG;true;S:Name,I:Num;Sets the global variable 'Name' to 'Num' immediately instead of being added through the dialogue owner's action queue. This allows variables to be set instantaneously and checked immediately afterwards in the same dialogue. ActionOverride() is supported. If used outside dialogue, this action behaves exactly as SG(). 
DisplayString;false;O:Object,I:StrRef;This action displays the strref specified by the StrRef parameter in the message window, attributing the text to the specified object. 
DisplayStringHead;false;O:Object,I:StrRef;This action displays the specified string over the head on the specified object (on the game-screen).  
DisplayStringHeadDead;false;O:Object,I:StrRef;This action displays the specified string over the head on the specified object (on the game-screen) even if the target is dead. 
DisplayStringHeadOwner;false;S:Item,I:STRREF;This action displays the specified strref over the head of the creature with the specified item. The action only checks current party members. 
DisplayStringNoName;false;O:Object,I:StrRef;This action displays the strref specified by the StrRef parameter in the message window, without attributing the text to an object. 
DisplayStringNoNameHead;false;O:Object,I:StrRef;This action displays the specified string over the head on the specified object (on the game-screen), without displaying it in the message log. 
DisplayStringWait;false;O:Object,I:StrRef;This action displays the specified string over the head on the specified object (on the game-screen). The text stays onscreen until the associated sound has completed playing. 
DoubleClickLButtonObject;false;O:Target,I:ScrollSpeedScroll;This action has not been seen to produce any results. 
DoubleClickLButtonPoint;false;P:Target,I:ScrollSpeedScroll;This action has not been seen to produce any results. 
DoubleClickRButtonObject;false;O:Target,I:ScrollSpeedScroll;This action has not been seen to produce any results. 
DoubleClickRButtonPoint;false;P:Target,I:ScrollSpeedScroll;This action has not been seen to produce any results. 
DropInventory;false;null;This action causes the active creature to drop all its inventory items. 
DropItem;false;S:Object,P:Location;This action instructs the active creature to drop the specified item at the specified location (relative to the active creature). The active creature must have the item to be dropped. Note that a coordinate of [-1.-1] will drop the item next to the active creature. 
EndCredits;false;null;This action shows the ending credits. 
EndCutSceneMode;false;null;This action ends a cutscene, and restores the GUI and player control. 
Enemy;false;null;This action is used to change the allegiance of the active creature to enemy (making them hostile to the PC). This example script, from a peasant, will turn the creature hostile if it is attacked. 
EquipItem;false;S:Object;This action instructs the active creature to equip the specified item. The item needs to be in one of the creatures quickslots. 
EquipMostDamagingMelee;false;null;This action instructs the active creature to equip the most damaging melee weapon from those available in the quickslots. Damage is calculated on the THAC0 bonus and damage - special bonuses versus creature types and elemental damages are not checked. 
EquipRanged;false;null;This action instructs the active creature to a ranged weapon from the weapons available in the quickslots. 
EraseJournalEntry;false;I:STRREF;This action removes the specified strref from the journal, regardless of the journal section the entry is in - except the user section. 
EscapeArea;false;null;This action, in its first form, instructs the active creature to leave the current area, either by walking, or, if the path is blocked, by simply disappearing. In the actions second form the action functions as a combination of EscapeAreaDestroy() and MoveBetweenAreas(). The parameters are similar to MoveBetweenAreas(), in that it takes in all the same information, but unlike MoveBetweenAreas(), the character will search for the nearest enabled travel trigger, move to that, then execute his movement to the specified area. If no travel trigger is found, the creature will just execute the movement. The action is uninterruptable. actions listed this one in a script may not execute as intended.
EscapeAreaDestroy;false;I:Delay;This action instructs the active creature to search for the nearest travel trigger point for the specified time (measured in second) before giving up and just disappearing. 
EscapeAreaMove;false;S:Area,I:X,I:Y,I:Face;This action, in its first form, instructs the active creature to leave the current area, either by walking, or, if the path is blocked, by simply disappearing. In the actions second form the action functions as a combination of EscapeAreaDestroy() and MoveBetweenAreas(). The parameters are similar to MoveBetweenAreas(), in that it takes in all the same information, but unlike MoveBetweenAreas(), the character will search for the nearest enabled travel trigger, move to that, then execute his movement to the specified area. If no travel trigger is found, the creature will just execute the movement. 
EscapeAreaNoSee;false;null;This action has not been seen to produce any results. 
EscapeAreaObject;false;O:Object;This action instructs the active creature to leave the area via the specified region. 
EscapeAreaObjectMove;false;S:ResRef,O:Object,I:X,I:Y,I:Face;This action instructs the target object to leave the current area, either by walking, or, if the path is blocked, by simply disappearing. The action functions as a combination of EscapeAreaDestroy() and MoveBetweenAreas(). The parameters are similar to MoveBetweenAreas(), in that it takes in all the same information, but unlike MoveBetweenAras(), the character will search for the nearest travel trigger, move to that, then execute his movement to the specified area. If he cannot find a travel trigger, he will execute the movement. 
ExitPocketPlane;false;null;This action tleports the party to the area from which the 'Area Switch: Pocket Plane' effect was last used. If this effect has never been used, or the party is not in the Pocket Plane this action has no effect. 
Explore;false;null;This action removes the fog of war for the area the active creature is in. 
Face;false;I:Direction;This action instructs the active creature to face the specified direction. Directions run from 0-15 with 0 being south and moving clockwise. Negative values act as relative directions to the current direction. 
FaceObject;false;O:Object;This action instructs the active creature to face the target object. 
FadeFromColor;false;P:Point,I:Blue;This action will unfade the screen. The point parameter is given in [x.y] format with the x coordinate specifying the number of AI updates (which default to 15 per second) to take to complete the fade action. 
FadeToColor;false;P:Point,I:Blue;This action will fade the screen. The point parameter is given in [x.y] format with the x coordinate specifying the number of AI updates (which default to 15 per second) to take to complete the fade action. 
FakeEffectExpiryCheck;false;O:Object,I:Ticks;This action removes effects with a duration timing mode from the specified object, if the remaining duration is below the ticks parameter. The action appears to only work from a creature script.  
FillSlot;false;I:SlotSLOTS;This action will attempt to fill a slot in the active creature's inventory with the appropriate item type. Using FillSlot(SLOT_WEAPON) will look for any weapon in the inventory, and move the first such item into the weapon slot. Any item already in the slot is destroyed. 
FindTraps;false;null;This action instructs the active creature to enter Detect Traps modal state. This action can be used for any creature (not just thieves) though success in detecting traps is dependent on points in the Find Traps skill. 
Follow;false;P:Point;This action instructs the active creature to move to the specified point following the marked Leader. 
FollowObjectFormation;false;O:Object,I:Formation,I:Position;This action instructs the active creature to follow the target object, in the specified formation, taking up the specified position. The Formation parameter represents the formation type (e.g. two lines, arrowhead, single line). The position should be in the range [0,5].  
FollowPath;false;null;Unknown 
ForceSpell;false;O:Target,I:SpellSpell;This action causes the active creature to cast the specified spell at the target object. The spell need not currently be memorised by the caster, and will not be interrupted while being cast. The caster must meet the level requirements of the spell. For the RES version of the action, the spell name can not consist of only numbers, should be written in upper case and should be no more than 7 characters long. This action may not be reliable.  
ForceSpellPoint;false;P:Target,I:SpellSpell;This action causes the active creature to cast the specified spell at the specified point ([x.y]). The spell need not currently be memorised by the caster, and will not be interrupted while being cast. The caster must meet the level requirements of the spell. For the RES version of the action, the spell name can not consist of only numbers, should be written in upper case and should be no more than 7 characters long. 
ForceSpellPointRange;false;P:Target,I:SpellSpell;This action is untested. It is likely that it will force the specified spell if the target is within range of the spell. 
ForceSpellPointRangeRES;false;S:RES,P:Target;This action is untested. It is likely that it will force the specified spell if the point is within range of the spell. 
ForceSpellPointRES;false;S:RES,P:Target;This action causes the active creature to cast the specified spell at the specified point ([x.y]). The spell need not currently be memorised by the caster, and will not be interrupted while being cast. The caster must meet the level requirements of the spell. For the RES version of the action, the spell name can not consist of only numbers, should be written in upper case and should be no more than 7 characters long. 
ForceSpellRange;false;O:Target,I:SpellSpell;This action is untested. It is likely that it will force the specified spell if the target is within range of the spell. 
ForceSpellRangeRES;false;S:RES,O:Target;This action causes the active creature to cast the specified spell at the target point. The spell need not currently be memorised by the caster, and will not be interrupted while being cast. The spell is cast instantly (i.e. with a casting time of 0). The caster must meet the level requirements of the spell. For the RES version of the action, the spell name can not consist of only numbers, should be written in upper case and should be no more than 7 characters long. This action may not be reliable. 
ForceSpellRES;false;S:ResRef,O:Target;This action causes the active creature to cast the specified spell at the target object. The spell need not currently be memorised by the caster, and will not be interrupted while being cast. The caster must meet the level requirements of the spell. For the RES version of the action, the spell name can not consist of only numbers, should be written in upper case and should be no more than 7 characters long. This action may not be reliable.  
Formation;false;O:Leader,P:Offset;This action can used to make the active creature follow the creature specified by the leader parameter, maintain a relative position determined by the offset parameter. 
GetItem;false;S:Object,O:Target;This action has not been seen to produce any results. 
GiveGoldForce;false;I:Amount;This action gives the specified amount of gold to the party. The active creature need not have the gold in its 'money variable'. A negative amount will remove gold from the active creature. 
GiveItem;false;S:Object,O:Target;This action instructs the active creature to give the specified item (parameter 1) to the specified target (parameter 2). The active creature must possess the item to pass it (holding it within a container within the inventory is fine). The sample script makes uses of modified IDS files (action, instant, trigger and svtiobj) though such modification are not necessary to use the GiveItem action itself. 
GiveItemCreate;false;S:ResRef,O:Object,I:Usage1,I:Usage2,I:Usage3;This action creates the item specified by the resref parameter on the creature specified by the object parameter, with quantity/charges controlled by the usage parameters. 
GiveOrder;false;O:Object,I:Order;This action is used in conjunction with the ReceivedOrder trigger, and works in a similar way to a global shout. The action passes a numeric order to the specified creature. Only one creature at a time responds to an order, and creatures to not detect their own orders. 
GivePartyAllEquipment;false;null;This action causes the active creature to give all their items to the party. 
GivePartyGold;false;I:Amount;This action gives the specified amount of gold to the party. The active creature must have the gold in its 'money variable'. 
GivePartyGoldGlobal;false;S:Name,S:Area;This action gives the party a sum of gold corresponding to the given global variable. The gold amount is deducted from the active creature. The example script will give the party 50gp. 
GlobalShout;false;I:ID;This action acts like Shout() without the range limit. 
GoToStartScreen;false;null;This action returns the player to the game start screen. 
GroupAttack;false;O:Target;This action instructs the active creature to attack creatures with the same specific value as the target creature. 
Help;false;null;This action acts similar to shout, but does not accept values. The range of the Help action is slightly larger than the default visual radius of NPCs. 
Hide;false;null;This action instructs the active creature to attempt to Hide in Shadows. This action can be used for any creature (not just thieves) though success in hiding is dependent on points in the Stealth skill. 
HideAreaOnMap;false;S:ResRef;This action hides an area on the worldmap, preventing travelling to it. 
HideGUI;false;null;This action hides the docking borders, menus, etc. on the sides of the screen. 
IncMoraleAI;false;I:Morale;This action has not been seen to produce any results. 
IncrementChapter;false;S:RESREF;This action is used to increment the chapter, and display a text screen (specified by the resref parameter - a 2DA file).  
IncrementGlobal;false;S:Name,S:Area,I:Value;This action alters the specified variable, in the specified scope, by the amount indicated. The amount can be positive or negative. Variables in the local scope cannot be changed with this action.
Interact;false;O:Object;This action is used to initiate banter between NPCs. The example script is from edwin.bcs. 
JoinParty;false;null;This action adds the active creature to the party. If the party is currently full the 'select party members' dialog is shown. JoinParty clears the ActionQueue of the active creature. 
JumpToPoint;false;P:Target;This action instantly moves the active creature to the specified point. 
Kill;false;O:Object;This action causes the target creature to die, dropping any droppable items they are carrying. 
LayHands;false;O:Target;This action is a leftover from BG1 - it does not work in BG2. 
Leader;false;P:Point;This action instructs the active creature to move to the specified point and marks the creature as a leader. The following example script sets Player1 walking to [3363.2954] and sets Player2 and Player3 to 'follow' to [3363.2954] in a line and with minimal walking into each other. This action is not fully understood, and is not particularly reliable. 
LeaveArea;false;S:Area,P:Point,I:Face;This action instructs the active creature to leave the current area. 
LeaveAreaLUA;false;S:Area,S:Parchment,P:Point,I:Face;This action changes the current area. 
LeaveAreaLUAEntry;false;S:Area,S:Entry,P:Point,I:Face;This action changes the current area. The active creature will move to the specified entry point (from entries.2da) before travelling. The action appears to only work from a creature script. 
LeaveAreaLUAPanic;false;S:Area,S:Parchment,P:Point,I:Face;This action changes the current area. 
LeaveAreaLUAPanicEntry;false;S:Area,S:Entry,P:Point,I:Face;This action changes the current area. The creature moves to the destination point (from entries.2da) before travelling (the point parameter is unused). 
LeaveParty;false;null;This action causes the active creature to leave the party. This action calls DropInventory() as part of its execution. 
Lock;false;O:Object;This action will lock the specified door/container. 
LockScroll;false;null;This action locks the screen on the active creature, preventing the screen from being scrolled away. The action only works from a creature script. 
LoseGame;true;null;Plays the ending cutscene as if the protagonist died. If the action is used in a pausing dialogue, the ending cutscene will play after the dialogue ends. This action does nothing in the arenas game type. 
MakeGlobal;false;null;This action adds the active creature to the GAM file. 
MakeUnselectable;false;I:Time;This action changes the active creature's selection circle to purple - making it unselectable. Creatures made unselectable stop processing scripts. 
MoraleDec;false;O:Target,I:Morale;This action alters the morale of the target by the specified amount. The change amount can be positive or negative. 
MoraleInc;false;O:Target,I:Morale;This action alters the morale of the target by the specified amount. The change amount can be positive or negative. 
MoraleSet;false;O:Target,I:Morale;This action sets the morale of the active creature. 
MoveBetweenAreas;false;S:Area,P:Location,I:Face;This action will move the active creature to the specified point in the indicated area, facing the appropriate direction. 
MoveBetweenAreasEffect;false;S:Area,S:Effect,P:Location,I:Face;This action will move the active creature to the specified point in the indicated area, facing the appropriate direction, and plays the specified graphics when the creature disappears. 
MoveCursorPoint;false;P:Target,I:ScrollSpeedScroll;This action has not been seen to produce any results. 
MoveGlobal;false;S:Area,O:Object,P:Point;This action will move the specified object to the target area, at the indicated point. The action will only work for creatures in the GAM file - i.e. NPCs or that have been added via MakeGlobal. 
MoveGlobalObject;false;O:Object,O:Target;This action says to jump the object in the first parameter to the object in the second parameter. The object in the first parameter does NOT have to be in the same area as the target, but must already be present in the saved game (as either an NPC or MakeGlobal()). 
MoveGlobalObjectOffScreen;false;O:Object,O:Target;This action moves the object creature a screen away from the specified target creature. The target object must be stored in the GAM file (i.e. NPC or added explicitly via the MakeGlobal action. 
MoveGlobalsTo;false;S:FromArea,S:ToArea,P:Location;This action is untested. It is likely to move all creatures present in the saved game that are currently in the FromArea parameter and move them to the Location in the ToArea parameter. 
MoveToCenterOfScreen;false;I:NotInterruptableFor;This action moves the active creature to the centre of the screen. Script conditions are not checked for the specified duration (measured in seconds) or until the creature has reached the screen centre. 
MoveToExpansion;false;null;This action moves the party to ToB, changes the worldmap, and switches scripts and dialogs to the X25 versions. 
MoveToObject;false;O:Target;This action instructs the active creature to move to the specified object. The action does not update the current position of the actor, saved in ARE files. The example script shows the creature moving towards the nearest enemy. 
MoveToObjectFollow;false;O:Object;This action instructs the active creature to move to the specified object. Once the active creature reaches the object, it will follow the target if it moves. This behaviour continues until a different action is issued or until the target creature travels between areas. 
MoveToObjectNoInterrupt;false;O:Object;This action instructs the active creature to move to the specified object. The action does not update the current position of the actor, saved in ARE files. Conditions are not checked until the destination point is reached. 
MoveToOffset;false;P:Offset;This action instructs the active creature to move a certain distance from its current location. i.e. the point is relative to the creatures current location.
MoveToPoint;false;P:Point;This action causes the active creature to move to the specified coordinates. The action will update the position of creatures as stored in ARE files (first by setting the coordinates of the destination point, then by setting the coordinates of the current point once the destination is reached). 
MoveToPointNoInterrupt;false;P:Point;This action causes the active creature to move to the specified coordinates. The action will update the position of creatures as stored in ARE files (first by setting the coordinates of the destination point, then by setting the coordinates of the current point once the destination is reached). Conditions are not checked until the destination point is reached. 
MoveToPointNoRecticle;false;P:Point;This action has not been seen to produce any results.
MoveToSavedLocationn;false;S:GLOBAL,S:Area;This action instructs the active creature to move to the previously saved specified location. 
MoveViewObject;false;O:Target,I:ScrollSpeedScroll;This action scrolls the view point (i.e. the area of the current map being displayed onscreen) to the target object ([x.y] at the specified speed. Speeds are taken from scroll.ids (VERY_FAST is equivalent to normal walking speed). 
MoveViewPoint;false;P:Target,I:ScrollSpeedScroll;This action scrolls the view point (i.e. the area of the current map being displayed onscreen) to the target point ([x.y] at the specified speed. Speeds are taken from scroll.ids (VERY_FAST is equivalent to normal walking speed). 
MultiPlayerSync;false;null;This action is used in multiplayer games to ensure that players are at the same point before continuing. 
NIDSpecial1;false;null;This action has not been seen to produce any results. 
NIDSpecial10;false;null;This action has not been seen to produce any results. 
NIDSpecial11;false;null;This action has not been seen to produce any results. 
NIDSpecial12;false;null;This action has not been seen to produce any results. 
NIDSpecial2;false;null;This action has not been seen to produce any results. 
NIDSpecial3;false;null;This action has not been seen to produce any results. 
NIDSpecial4;false;null;This action has not been seen to produce any results. 
NIDSpecial5;false;null;This action has not been seen to produce any results. 
NIDSpecial6;false;null;This action has not been seen to produce any results. 
NIDSpecial7;false;null;This action has not been seen to produce any results. 
NIDSpecial8;false;null;This action has not been seen to produce any results. 
NIDSpecial9;false;null;This action has not been seen to produce any results. 
NoAction;false;null;This action can be used to do nothing - many characters walk around randomly or stand in one place doing nothing 
OpenDoor;false;O:Object;This action will open the specified door. If the door is locked the creature must possess the correct key. Some doors central to the plot doors cannot be opened. The active creature can stick on this action if it fails. 
Panic;false;null;This action causes the active creature to move randomly around the screen. 
PauseGame;false;null;This action pauses the game. Script processing is halted while the game is paused. 
PickLock;false;O:Object;This action has not been seen to produce any results. 
PickPockets;false;O:Target;This action instructs the active creature to attempt to pickpocket the target. This action can be used for any creature (not just thieves) though success in pick pocketing is dependent on points in the Pickpocket skill. Note that a failed pickpocket attempt is treated as an attack, hence the Attacked() trigger will return true if a pickpocket attempt is failed. 
PickUpItem;false;S:ResRef;This action instructs the active creature remove the item from the area and put it in their inventory (assuming the inventory has enough room and the item exists). 
PlayDead;false;I:Time;This action instructs the active creature to 'play dead', i.e. to lay on the ground, for the specified interval (measured in AI updates per second (AI updates default to 15 per second). If used on a PC, the player can override the action by issuing a standard move command. 
PlayDeadInterruptable;false;I:Time;This action instructs the active creature to 'play dead', i.e. to lay on the ground, for the specified interval (measured in AI updates per second (AI updates default to 15 per second). If used on a PC, the player can override the action by issuing a standard move command. Other conditions are checked during the play dead period. 
PlayDeadInterruptible;false;I:Time;This action instructs the active creature to 'play dead', i.e. to lay on the ground, for the specified interval (measured in AI updates per second (AI updates default to 15 per second). If used on a PC, the player can override the action by issuing a standard move command. Other conditions are checked during the play dead period. 
PlayerDialog;false;O:Target;This action instructs the active creature to start a dialog with the target creature, from any distance. If the target is invalid, no action will be taken. 
PlayerDialogue;false;O:Target;This action instructs the active creature to start a dialog with the target creature, from any distance. If the target is invalid, no action will be taken. 
PlaySong;false;I:Song;The action plays the specified song. Values are from songlist.2da. 
PlaySound;false;S:Sound;This action will cause the active creature to play the specified sound. Both WAV and WAVC files can be played by the action. 
Polymorph;false;I:AnimationTypeAnimate;This action causes the active creature to change animation to the specified animation (values from animate.ids) 
PolymorphCopy;false;O:Object;This action changes the animation of the active creature to match the animation of the target object. 
PolymorphCopyBase;false;O:Object;This action copies the base animation (i.e. no armour or colouring) of the target creature to the active creature. 
ProtectObject;false;O:Target,I:Range;This action instructs the active creature to protect the specified creature (i.e. attack any enemies of the creature), while staying within the specified range. 
ProtectPoint;false;P:Target,I:Range;This action causes the active creature to guard the specified point, staying within the specified range. 
RandomFly;false;null;This action gives the appearance of flying - the active creature is able to pass over impassable areas. 
RandomTurn;false;null;This action causes the active creature to turn in a random direction. 
RandomWalk;false;null;This action causes the active creature to walk randomly, staying within the current area. The example script is blbear.bcs. it instructs bears to walk rather than fight if the nearest enemy is a druid. 
RandomWalkContinuous;false;null;This action causes the active creature to walk randomly, without pausing. 
ReallyForceSpell;false;O:Target,I:SpellSpell;This action causes the active creature to cast the specified spell at the target object. The spell need not currently be memorised by the caster, and will not be interrupted while being cast. The spell is cast instantly (i.e. with a casting time of 0). The caster must meet the level requirements of the spell. This action does not work in the script round where the active creature has died. 
ReallyForceSpellDead;false;O:Target,I:SpellSpell;This action causes the active creature to cast the specified spell at the target object. The spell need not currently be memorised by the caster, and will not be interrupted while being cast. The spell is cast instantly (i.e. with a casting time of 0). The caster must meet the level requirements of the spell. For the RES version of the action, the spell name can not consist of only numbers, should be written in upper case and should be no more than 7 characters long. This action may not be reliable. This action works in the script round where the active creature has died. 
ReallyForceSpellDeadRES;false;S:RES,O:Target;This action causes the active creature to cast the specified spell at the target point. The spell need not currently be memorised by the caster, and will not be interrupted while being cast. The spell is cast instantly (i.e. with a casting time of 0). The caster must meet the level requirements of the spell. For the RES version of the action, the spell name can not consist of only numbers, should be written in upper case and should be no more than 7 characters long. This action may not be reliable. 
ReallyForceSpellPoint;false;P:Target,I:SpellSpell;This action causes the active creature to cast the specified spell at the target point. The spell need not currently be memorised by the caster, and will not be interrupted while being cast. The spell is cast instantly (i.e. with a casting time of 0). The caster must meet the level requirements of the spell. For the RES version of the action, the spell name can not consist of only numbers, should be written in upper case and should be no more than 7 characters long. This action may not be reliable. 
ReallyForceSpellPointRES;false;S:RES,P:Target;This action is untested. It is likely that it will force the specified spell if the point is within range of the spell. 
ReallyForceSpellRES;false;S:ResRef,O:Target;This action causes the active creature to cast the specified spell at the target object. The spell need not currently be memorised by the caster, and will not be interrupted while being cast. The spell is cast instantly (i.e. with a casting time of 0). The caster must meet the level requirements of the spell. This action does not work in the script round where the active creature has died. 
RealSetGlobalTimer;false;S:Name,S:Area,I:TimeGTimes;This action sets a global timer measured in seconds (of real time). 
Recoil;false;null;This action instructs the active creature to play the recoil animation. Note that some objects do not have this animation. 
RegainPaladinHood;false;null;This action restores a Fallen Paladin to normal Paladin status. Increments Reputation to 10? 
RegainRangerHood;false;null;This action restores a Fallen Ranger to normal Ranger status. Increments Reputation to 10? 
RemoveAreaFlag;false;I:TypeAREAFLAG;This action will remove area flags (e.g. save enabled, tutorial) to the current area. The area flags value is OR'd, so multiple values can be set. Values are from areaflag.ids. 
RemoveAreaType;false;I:TypeAREATYPE;This action will remove area type flags (e.g. outdoor, dungeon) to the current area. Values are from areatype.ids 
RemoveFamiliar;false;null;This action removes the ally flag set by AddFamiliar. 
RemoveMapNote;false;P:Position,I:STRREF;This will remove a map note from the current area's mini-map at the specified position. The position is a location on the actual area map (not the minimap). 
RemovePaladinHood;false;null;This action changes a Paladin to a Fallen Paladin. 
RemoveRangerHood;false;null;This action changes a Ranger to a Fallen Ranger. 
RemoveSpell;false;I:SpellSpell;This action removes one memorised indtance of the specified spell from the spellbook of the active creature. The spell can be an innate ability, a priest spell or a wizard spell, but must be listed in spell.ids.  
RemoveSpellRES;false;S:Spell;This action removes one memorised indtance of the specified spell from the spellbook of the active creature. The spell can be an innate ability, a priest spell or a wizard spell, but must be listed in spell.ids.  
RemoveTraps;false;O:Trap;This action causes the active creature to attempt to disarm the specified trap. This action can be used for any creature (not just thieves) though success in disarming is dependent on points in the Disarm Trap skill. 
ReputationInc;false;I:Reputation;This action alters the reputation by the specified value (which can be either negative or positive). The example script is from baldur.bcs. 
ReputationSet;false;I:Reputation;This action sets the reputation to the specified value. 
Rest;false;null;This action applies the benefits of resting (i.e. healing, restoring spells and restoring abilities) to the active creature. The action does not play the rest movie or advance game time. 
RestNoSpells;false;null;This action rests the party, but doesn't force healing spells to be cast on injured party members. 
RestorePartyLocations;false;null;This action moves the party to the stored locations (previously stored with StorePartyLocations). The action clears the stored locations from the GAM file. 
RestParty;false;null;This action duplicates the effects of resting. Such resting is not interruptible, and functions even if enemies are nearby. 
RevealAreaOnMap;false;S:ResRef;This action reveals an area on the worldmap, enabling travelling to it. 
RunAwayFrom;false;O:Creature,I:Time;This action causes the active creature to run away from the specified creature, for the specified time. The time parameter is measured in AI updates, which default to 15 updates per second. Occasionally, fleeing creatures stop to attack another creature. 
RunAwayFromNoInterrupt;false;O:Creature,I:Time;This action causes the active creature to run away from the specified creature, for the specified time. The time parameter is measured in AI updates, which default to 15 updates per second. Occasionally, fleeing creatures stop to attack another creature. Conditions are not checked until the time has expired. 
SaveGame;false;I:Slot;This action saves the game in the specified save slot. 
SaveLocation;false;S:Area,S:Global,P:Point;This action is similar to StorePartyLocations() but with one object. 
SaveObjectLocation;false;S:Area,S:Global,O:Object;This action stores the location of the specified object in the named variable. 
ScreenShake;false;P:Point,I:Duration;This action shakes the game view. The point parameter dictates how far to shake the screen along the x and y axis. The duration parameter dictates how long the shaking lasts.
SelectWeaponAbility;false;I:WeaponNumSlots,I:AbilityNum;This action instructs the active creature to select the specified slot, and use the ability in the extended header specified by the ability parameter. 
SendTrigger;false;O:Target,I:TriggerNum;This action is used as a form of script communication, in conjunction with the Trigger() trigger. The action has the same range as GiveOrder and affects only one creature at a time. Note that the LastTrigger() object does not get set after receiving a trigger. 
SetAreaRestFlag;false;I:CanRest;This action dictates whether resting is allowed in the current area. 
SetBeenInPartyFlags;false;null;This action sets the BeenInParty flag in the CRE file of the active creature. This action also triggers appropriate dialog and script file changes (as referenced in PDIALOG.2da). 
SetCursorState;false;I:BOOLBOOLEAN;This action starts a cutscene. Player control is removed, though all scripts keep running. Note that actions already in the action list are not cleared without an explicit call to ClearAllActions. 
SetCutSceneLite;false;I:BOOLBOOLEAN;This action starts a cutscene. Player control is removed, though all scripts keep running. Note that actions already in the action list are not cleared without an explicit call to ClearAllActions. 
SetDialog;false;S:DialogFile;This action sets the dialog file of the active creature to the specified file. SetDialogue('') will set the dialog file to nothing. 
SetDialogue;false;S:DialogFile;This action sets the dialog file of the active creature to the specified file. SetDialogue('') will set the dialog file to nothing. 
SetEncounterProbability;false;S:FromArea,S:ToArea,I:Probability;This action modifies the probability of a travel encounter (by modifying fields in the WMP file) between the specified areas. 
SetGabber;false;O:Object;This action updates various tokens based on the specified object. 
SetGlobal;false;S:Name,S:Area,I:Value;This action sets a variable (specified by name) in the scope (specified by area) to the value (specified by value). See the variable type appendix for details on variables. 
SetGlobalTimer;false;S:Name,S:Area,I:TimeGTimes;This action sets a global timer. The timer is checked by the GlobalTimerExpired trigger or GlobalTimerNotExpired trigger. 
SetHomeLocation;false;P:Point;This action stores a 'home' location into memory for a creature. The location is not saved. 
SetInterrupt;false;I:StateBoolean;This action sets whether a creature can be interrupted while carrying out script actions. 
SetLeavePartyDialogFile;false;null;This action sets the dialog for the active creature to their leave dialog. 
SetLeavePartyDialogueFile;false;null;This action sets the dialog for the active creature to their leave dialog. 
SetMasterArea;false;S:Name;This action adds the specified area to the top of the area script processing stack. When the player enters an area that is not in the mastarea.2da the associated script is added to the bottom of the area script processing stack. When the player enters an area that is in mastarea.2da the associated script is added to the top of the area script processing stack. 
SetMoraleAI;false;I:MoraleMoraleAI;This action has not been seen to produce any results. 
SetName;false;I:STRREF;This action changes the name of the active creature to the specified strref. 
SetNumTimesTalkedTo;false;I:Num;This action sets the number of times the active creature has been talked to (by player characters). 
SetPlayerSound;false;O:Object,I:STRREF,I:SlotNumSNDSLOT;This action changes the specified sound reference (SndSlot) on the specified creature to the specified value. It should be noted that the biography can be changed by this action, as it is listed as a SoundSlot (EXISTANCE5). 
SetQuestDone;false;I:STRREF;This action removes the specified strref from the quest section of the journal. 
SetRestEncounterProbabilityDay;false;I:Prob;This action modifies the probability of a daytime rest interruption (by modifying fields in the ARE file). 
SetRestEncounterProbabilityNight;false;I:Prob;This action modifies the probability of a night-time rest interruption (by modifying fields in the ARE file). 
SetSequence;false;I:SequenceSEQ;This action instructs the active creature to perform the specified animation sequence. Values are from seq.ids. 
SetToken;false;S:Token,I:STRREF;This action sets the specified token to the specified value. Whenever the token is then used within a strref, the current value of the token will be displayed. Values assigned by this action are not saved. 
SetTokenGlobal;false;S:GLOBAL,S:Area,S:Token;This action sets the specified token to the given variable (in the specified scope). 
SetTokenObject;false;S:Token,O:Object;This action can transfer a token value from the performer of the action to the target. The action can also be used for targeting: using SetTokenObject('MYTARGET',[ENEMY.0.0.MAGE_ALL]) will set a target marker on the nearest enemy mage. You could then use Attack('MYTARGET') to attack that mage. Values assigned by this action are not saved. 
SetupWish;false;I:Column,I:Count;This action instructs the engine to use the fourth column of wish.2da and carry out a RandomNum(2,1) action starting at the top and working down. If the RandomNum returns with a 1 then the appropriate global for that spell is set. Once the maximum 'wish choices' have been selected, the dialog continues and casts the selected spell. 
SetupWishObject;false;O:Creature,I:Count;This action instructs the engine to use the fourth column of wish.2da and carry out a RandomNum(2,1) action starting at the top and working down. If the RandomNum returns with a 1 then the appropriate global for that spell is set. Once the maximum 'wish choices' have been selected, the dialog continues and casts the selected spell. 
SG;false;S:Name,I:Num;This action acts as a shortcut for SetGlobal(). The action can only set global variables. 
Shout;false;I:IDSHOUTIDS;This action is used to shout the specified number. The action is used in conjunction with the Heard trigger. A silenced creature cannot shout. Shout can be Heard() throughout the current area.
SmallWait;false;I:Time;This action is similar to Wait(), it causes a delay in script processing. The time is measured in AI updates (which default to 15 per second) 
SoundActivate;false;O:Object,I:StateBOOLEAN;This action is used in conjunction with ambient sounds in ARE files. The action sets the enabled state of an ambient sound (specified by the object parameter). 
SpawnPtActivate;false;O:Object;As it says, this action will activate a spawn point in an area. The Object should be the name of the spawn point as written in the ARE file. 
SpawnPtDeactivate;false;O:Object;This action is used in conjunction with spawn points in ARE files. The action sets the enabled state of a spawn point (specified by the object parameter). 
SpawnPtSpawn;false;O:Object;This action causes an activated spawn point to spawn creatures, regardless of whether the time for spawning has expired. The Object should be the name of the spawn point as written in the ARE file 
Spell;false;O:Target,I:SpellSpell;This action causes the active creature to cast the specified spell at the target object. The spell must currently be memorised by the caster, and may be interrupted while being cast. The caster must meet the level requirements of the spell. For the RES version of the action, the spell name can not consist of only numbers, should be written in upper case and should be no more than 7 characters long. This action may not be reliable. 
SpellNoDec;false;O:Target,I:SpellSpell;This action causes the active creature to cast the specified spell at the target object. The spell need not be currently be memorised by the caster, and may be interrupted while being cast. The caster must meet the level requirements of the spell. The spell will not be removed from the casters memory after casting. For the RES version of the action, the spell name can not consist of only numbers, should be written in upper case and should be no more than 7 characters long. This action may not be reliable. 
SpellNoDecRES;false;S:RES,O:Target;This action causes the active creature to cast the specified spell at the target object. The spell need not be currently be memorised by the caster, and may be interrupted while being cast. The caster must meet the level requirements of the spell. The spell will not be removed from the casters memory after casting. For the RES version of the action, the spell name can not consist of only numbers, should be written in upper case and should be no more than 7 characters long. This action may not be reliable. 
SpellPoint;false;P:Target,I:SpellSpell;This action causes the active creature to cast the specified spell at the specified point ([x.y]). The spell must currently be memorised by the caster, and may be interrupted while being cast. The caster must meet the level requirements of the spell. For the RES version of the action, the spell name can not consist of only numbers, should be written in upper case and should be no more than 7 characters long.  
SpellPointNoDec;false;P:Target,I:SpellSpell;This action causes the active creature to cast the specified spell at the specified point ([x.y]). The spell must currently be memorised by the caster, and may be interrupted while being cast. The caster must meet the level requirements of the spell. The spell will be removed from the casters memory. For the RES version of the action, the spell name can not consist of only numbers, should be written in upper case and should be no more than 7 characters long. 
SpellPointNoDecRES;false;S:RES,P:Target;This action causes the active creature to cast the specified spell at the specified point ([x.y]). The spell must currently be memorised by the caster, and may be interrupted while being cast. The caster must meet the level requirements of the spell. The spell will be removed from the casters memory. For the RES version of the action, the spell name can not consist of only numbers, should be written in upper case and should be no more than 7 characters long. 
SpellPointRES;false;S:RES,P:Target;This action causes the active creature to cast the specified spell at the specified point ([x.y]). The spell must currently be memorised by the caster, and may be interrupted while being cast. The caster must meet the level requirements of the spell. For the RES version of the action, the spell name can not consist of only numbers, should be written in upper case and should be no more than 7 characters long.  
SpellRES;false;S:RES,O:Target;This action causes the active creature to cast the specified spell at the target object. The spell must currently be memorised by the caster, and may be interrupted while being cast. The caster must meet the level requirements of the spell. For the RES version of the action, the spell name can not consist of only numbers, should be written in upper case and should be no more than 7 characters long. This action may not be reliable. 
StartCombatCounter;false;null;This action can be used to manually start the combat counter. 
StartCutScene;false;S:CutScene;This action starts a cutscene. a cinematic sequence that removes the GUI and player control. The cutscene parameter is the script name to run. 
StartCutSceneMode;false;null;This action starts a cutscene. Player control is removed, and scripts stop running. Note that actions already in the action list are not cleared without an explicit call to ClearAllActions. 
StartDialog;false;S:DialogFile,O:Target;This action instructs the active creature to start the specified dialog with the specified target. The dialog can be initiated from a distance and must have at least one state with all its top level conditions true else it will not initiate. The active creature has its dialog file permanently set to the file specified by the DialogFile parameter. 
StartDialogInterrupt;false;S:DialogFile,O:Target;These actions work the same as their counterpart dialog actions. The only difference is that they are important enough to interrupt other dialogs already in action. 
StartDialogNoName;false;S:DialogFile,O:Target;This action instructs the active creature to start the specified dialog with the specified target. The dialog can be initiated from a distance and must have at least one state with all its top level conditions true else it will not initiate. The active creature name will not appear as the dialog attribution. 
StartDialogNoSet;false;O:Object;This action instructs the active creature to initiate dialog with the target object, using its currently assigned dialog file. This action can be used from a distance and will work whether the target creature is in sight or not. Dialog will not be initiated if the creature using this action has been assigned a dialog that has all top level conditions returning false. If the target is invalid, the active creature will initiate dialog with Player1. 
StartDialogNoSetInterrupt;false;O:Object;These actions work the same as their counterpart dialog actions. The only difference is that they are important enough to interrupt other dialogs already in action. 
StartDialogOverride;false;S:DialogFile,O:Target;This action instructs the active creature to start the specified dialog with the specified target. The dialog can be initiated from a distance and must have at least one state with all its top level conditions true else it will not initiate. The active creature will not have its dialog file permanently set to the file specified by the DialogFile parameter. 
StartDialogOverrideInterrupt;false;S:DialogFile,O:Target;This action has not been seen to produce any results. 
StartDialogue;false;S:DialogFile,O:Target;This action instructs the active creature to start the specified dialog with the specified target. The dialog can be initiated from a distance and must have at least one state with all its top level conditions true else it will not initiate. The active creature has its dialog file permanently set to the file specified by the DialogFile parameter. 
StartDialogueInterrupt;false;S:DialogFile,O:Target;These actions work the same as their counterpart dialog actions. The only difference is that they are important enough to interrupt other dialogs already in action. 
StartDialogueNoSet;false;O:Object;This action instructs the active creature to initiate dialog with the target object, using its currently assigned dialog file. This action can be used from a distance and will work whether the target creature is in sight or not. Dialog will not be initiated if the creature using this action has been assigned a dialog that has all top level conditions returning false. If the target is invalid, the active creature will initiate dialog with Player1. 
StartDialogueNoSetInterrupt;false;O:Object;These actions work the same as their counterpart dialog actions. The only difference is that they are important enough to interrupt other dialogs already in action. 
StartMovie;false;S:ResRef;This action is used to a play a movie (MVE file). 
StartMusic;false;I:Slot,I:FlagsMFLAGS;This action tarts playing a music track. The slot parameter refers to the music slots contained in the ARE header. The flag parameter indicates how the music should be played - values are from mflags.ids. 
StartRainNow;false;null;This action will immediately set the weather to raining, over the current overlay (rather than taking several seconds to darken the area before starting to rain). 
StartStore;false;S:Store,O:Target;This action starts the specified store with the specified object. 
StartTimer;false;I:ID,I:Time;This action starts a timer local to the active creature. The timer is measured in seconds, and the timer value is not saved in save games. The timer is checked with the TimerExpired trigger. 
StateOverrideFlag;false;I:StateBoolean;This action instructs all creatures in the current area(?) ignore the following states flags for the time specified, or until a save-game reload. The creatures still have the state flags set. This action mainly seems to be used to get player characters to look like they are 'paying attention' to anything that is happening around them. 
StateOverrideTime;false;I:Time;This action instructs all creatures in the current area(?) ignore the following states flags for the time specified, or until a save-game reload. The creatures still have the state flags set. This action mainly seems to be used to get player characters to look like they are 'paying attention' to anything that is happening around them. 
StaticPalette;false;S:Palette,O:Object;This action changes the palette (BMP file) of the specified animation object. 
StaticSequence;false;O:Object,I:Sequence;This action is used in conjunction with animations in ARE files. The action will start the specified animation sequence. 
StaticStart;false;O:Object;This action is used in conjunction with animations in ARE files. The action will start the specified animation. 
StaticStop;false;O:Object;This action is used in conjunction with animations in ARE files. The action will stop the specified animation. 
StorePartyLocations;false;null;This action stores the current location of party members in the GAM file. 
Swing;false;null;This action instructs the active creature to play the swing weapon animation. Note that some objects do not have this animation. 
SwingOnce;false;null;This action instructs the active creature to play the swing weapon animation once. Note that some objects do not have this animation. 
TakeItemListParty;false;S:ResRef;This action removes the items listed in the specified 2DA file from the party. 
TakeItemListPartyNum;false;S:ResRef,I:Num;This action will remove the specified number of items from the party, as listed in the specified 2DA file. 
TakeItemReplace;false;S:Give,S:Take,O:Object;This action replaces the item in second parameter with the item in first parameter. If the target does not have the item in the second parameter, the item in the first parameter will still be created in the inventory. Note that this action will not automatically equip the item that's created. 
TakePartyGold;false;I:Amount;This action takes the specified amount of gold from the party. If performed by a party member, the gold is transferred to that characters gold stat (in the CRE file) and re-added to the party pot when the character re-joins the party. 
TakePartyItem;false;S:Item;This action takes a single instance of the specified item from the party (unless the item exists in a stack, in which case the entire stack is taken). Characters are checked in current party order. The item is transferred to the inventory of the active creature. If there are multiple calls to TakePartyItem() in the same block, each with the same item specified, only one call will actually remove an item (on each execution of the block). If an item is found in a container on an earlier player and in the inventory of a later player, both item instances may be removed. 
TakePartyItemAll;false;S:Item;This action removes all instances of the specified item from the party. The items are placed in the inventory of the active creature. Items contained in containers (e.g. Bag of Holding) are not taken. 
TakePartyItemNum;false;S:ResRef,I:Num;This action will remove a number of instances (specified by the Num parameter) of the specified item from the party. The items will be removed from players in order, for example. Player1 has 3 instances of 'MYITEM' in their inventory, Player2 has 2 instance of 'MYITEM,' and Player3 has 1 instance. If the action TakePartyItemNum('MYITEM', 4) is run, all 3 instances of 'MYITEM' will be taken from Player1, and 1 instance will be taken from Player2. This leaves Player2 and Player3 each with one instance of 'MYITEM.' If the last item of an item type stored in a container STO file is removed by this action, the amount becomes zero. Items with zero quantities cannot be seen in-game, cannot be removed by TakePartyItem, and will not count toward a container's current item load. If the item to be taken is in a stack, and the stack is in a quickslot, the item will be removed, and the remaining stack will be placed in the inventory. If the inventory is full, the stack item will be dropped on the ground. 
TakePartyItemRange;false;S:Item;This action instructs the active creature to take the specified item from the party, if they are nearby. A range for the action cannot be specified. 
TextScreen;false;S:TextList;This action displays a textscreen, showing text and graphics from the specified 2DA file. 
TriggerActivation;false;O:Object,I:StateBoolean;This action is used in conjunction with trigger region in ARE files. The action sets the activation state a trigger region (specified by the object parameter). 
TriggerWalkTo;false;O:Object;This action has not been seen to produce any results. 
Turn;false;null;This action turns any undead creatures within range of the active creature. This action can be used for any creature (not just paladins/clerics) though success in turning is dependent on the Turn Undead level of the creature, which is only calculated for paladins and clerics. The chance to successfully turn undead is based on creatures level and class. Paladins turn at 2 levels less than clerics of the same level. An undead creature will be destroyed/controlled if its level is more than 7 levels below the active creatures turn undead level. An undead creature may be turned (i.e. forced to flee) is its level is equal to, or up to 4 levels below, the active creatures turn undead level.
UndoExplore;false;null;This action resets the fog of war for the area the active creature is in.  
UnhideGUI;false;null;This action restores the docking borders, menus etc. to the sides of the screen. 
Unlock;false;O:Object;This action will unlock the specified door/container. 
UnlockScroll;false;null;This action unlocks the screen if it has been locked. 
UseContainer;false;null;This action is used by the engine internally. An object id is expected in the in1 parameter. 
UseDoor;false;null;This action is used by the engine internally. An object id is expected in the in1 parameter. 
UseItem;false;S:Object,O:Target;This action instructs the active creature to use the specified item (object) on the specified target (target). The ability number (i.e. extended header index) to use may be specified. This action is most often used to allow use of potions and wands. The item to be used must exist in the active creature's inventory (not in a container within the inventory) - though it need not be equipped.
UseItemPoint;false;S:Item,P:Target,I:Ability;This action has not been seen to produce any results. 
UseItemPointSlot;false;P:Target,I:Slot;This action has not been seen to produce any results. 
UseItemSlot;false;O:Target,I:SlotSLOTS;This action instructs the active creature to use the specified item (object) on the specified target (target). The ability number (i.e. extended header index) to use may be specified. This action is most often used to allow use of potions and wands. The item to be used must exist in the active creature's inventory (not in a container within the inventory) - though it need not be equipped.
VEquip;false;I:item;This action will sequentially change the visual representation of armour the active creature is wearing. The action cycles from the lowest (none) to the highest (plate mail) armour level. 
VerbalConstant;false;O:Object,I:ConstantsoundOff;This action plays a sound linked to the object. 
VerbalConstantHead;false;O:Object,I:ConstantsoundOff;This action plays the specified sound from the character's soundset. 
Wait;false;I:Time;This action causes a delay in script processing. The time is measured in seconds. 
Weather;false;I:WeatherWeather;This action changes the weather. The action only works in outdoors areas that have weather enabled in the ARE file. Values for the weather parameter are from weather.ids. Note that the fog weather type does not work. 
Assign;true;S:Statement,I:TypeArgType,I:Local;Assigns a value determined by Statement of the type Type from ARGTYPE.IDS (INT integer, or STR string) to a local action block variable. The general form of Statement is 'prefix[params]'. If Object is specified, the value of Statement is determined relative to Object instead of the object that owns the script. This action is ignored by prior Eval() actions.
AssignFromObject;true;S:Statement*,O:Object,I:TypeArgType,I:Local;Assigns a value determined by Statement of the type Type from ARGTYPE.IDS (INT integer, or STR string) to a local action block variable. The general form of Statement is 'prefix[params]'. If Object is specified, the value of Statement is determined relative to Object instead of the object that owns the script. This action is ignored by prior Eval() actions.
Eval;true;S:Expression,I:TypeArgType,I:Loc;Overwrites the (Loc)th argument of type Type from ARGTYPE.IDS (INT integer, or STR string) in the next action with the value returned by Expression. To replace point X and point Y, use a Loc value of 4 and 5, respectively. This action skips subsequent Assign() and Eval() actions when determining in which action to overwrite a value. This action does not overwrite values of actions beyond ClearBlockVariables() actions.
ClearBlockVariables;true;null;Sets all action block integer variables to 0 and empties all actions block string variables. 

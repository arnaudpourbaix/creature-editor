package com.pourbaix.creature.editor.domain;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import com.google.common.base.Predicate;
import com.google.common.collect.Iterables;
import com.pourbaix.creature.editor.service.SpellDataService;
import com.pourbaix.infinity.datatype.SchoolEnum;
import com.pourbaix.infinity.datatype.SpellSecondaryTypeEnum;
import com.pourbaix.infinity.datatype.SpellTypeEnum;

/**
 * Spell generated by hbm2java
 */
@Entity
@Table(name = "SPELL", schema = "PUBLIC", catalog = "PUBLIC")
public class Spell implements java.io.Serializable {

	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "ID", unique = true, nullable = false)
	private Integer id;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "MOD_ID", nullable = false)
	private Mod mod;

	@Column(name = "RESOURCE", nullable = false, length = 8)
	private String resource;

	@Column(name = "NAME", nullable = false, length = 50)
	private String name;

	@Column(name = "IDENTIFIER", length = 50)
	private String identifier;

	@Column(name = "DESCRIPTION", length = 3000)
	private String description;

	@Column(name = "LEVEL", nullable = false)
	private int level;

	@Column(name = "TYPE", nullable = false)
	@Enumerated
	private SpellTypeEnum type;

	@Column(name = "SECONDARY_TYPE", nullable = false)
	@Enumerated
	private SpellSecondaryTypeEnum secondaryType;

	@Column(name = "FLAGS")
	private Long flags;

	@Column(name = "EXCLUSION_FLAGS")
	private Long exclusionFlags;

	@Column(name = "OFFENSIVE_FLAGS")
	private Long offensiveFlags;

	@Column(name = "DEFENSIVE_FLAGS")
	private Long defensiveFlags;

	@Column(name = "RANGE")
	private Integer range;

	@Column(name = "SCHOOL")
	@Enumerated
	private SchoolEnum school;

	@Column(name = "SINGLE_TARGET", nullable = false)
	private boolean singleTarget = true;

	@Column(name = "HURT_ALLIES", nullable = false)
	private boolean hurtAllies;

	@Column(name = "EFFECTS")
	private Integer effects;

	public Spell() {
		this.offensiveFlags = 0l;
		this.defensiveFlags = 0l;
	}

	public String toString() {
		StringBuilder sb = new StringBuilder(resource);
		sb.append(", name=").append(name);
		sb.append(", level=").append(level);
		sb.append(", identifier=").append(identifier);
		return sb.toString();
	}

	public boolean isOffensiveFlagSet(final SpellOffensiveFlagEnum name) {
		SpellOffensiveFlag flag = Iterables.find(SpellDataService.offensiveFlags, new Predicate<SpellOffensiveFlag>() {
			public boolean apply(SpellOffensiveFlag input) {
				return input.getName() == name;
			}
		});
		long bitnr = (long) Math.pow((double) 2, (double) flag.getBit());
		return (offensiveFlags & bitnr) == bitnr;
	}

	public void setOffensiveFlag(final SpellOffensiveFlagEnum name) {
		SpellOffensiveFlag flag = Iterables.find(SpellDataService.offensiveFlags, new Predicate<SpellOffensiveFlag>() {
			public boolean apply(SpellOffensiveFlag input) {
				return input.getName() == name;
			}
		});
		long bitnr = (long) Math.pow((double) 2, (double) flag.getBit());
		if (!((offensiveFlags & bitnr) == bitnr)) {
			this.offensiveFlags += bitnr;
		}
	}

	public void setDefensiveFlag(final SpellDefensiveFlagEnum name) {
		SpellDefensiveFlag flag = Iterables.find(SpellDataService.defensiveFlags, new Predicate<SpellDefensiveFlag>() {
			public boolean apply(SpellDefensiveFlag input) {
				return input.getName() == name;
			}
		});
		long bitnr = (long) Math.pow((double) 2, (double) flag.getBit());
		if (!((defensiveFlags & bitnr) == bitnr)) {
			this.defensiveFlags += bitnr;
		}
	}

	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public Mod getMod() {
		return this.mod;
	}

	public void setMod(Mod mod) {
		this.mod = mod;
	}

	public String getResource() {
		return this.resource;
	}

	public void setResource(String resource) {
		this.resource = resource;
	}

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getIdentifier() {
		return this.identifier;
	}

	public void setIdentifier(String identifier) {
		this.identifier = identifier;
	}

	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public int getLevel() {
		return this.level;
	}

	public void setLevel(int level) {
		this.level = level;
	}

	public SpellTypeEnum getType() {
		return this.type;
	}

	public void setType(SpellTypeEnum type) {
		this.type = type;
	}

	public SpellSecondaryTypeEnum getSecondaryType() {
		return this.secondaryType;
	}

	public void setSecondaryType(SpellSecondaryTypeEnum secondaryType) {
		this.secondaryType = secondaryType;
	}

	public Long getExclusionFlags() {
		return this.exclusionFlags;
	}

	public void setExclusionFlags(Long exclusionFlags) {
		this.exclusionFlags = exclusionFlags;
	}

	public Integer getRange() {
		return this.range;
	}

	public void setRange(Integer range) {
		this.range = range;
	}

	public SchoolEnum getSchool() {
		return this.school;
	}

	public void setSchool(SchoolEnum school) {
		this.school = school;
	}

	public boolean isHurtAllies() {
		return this.hurtAllies;
	}

	public void setHurtAllies(boolean hurtAllies) {
		this.hurtAllies = hurtAllies;
	}

	public Integer getEffects() {
		return this.effects;
	}

	public void setEffects(Integer effects) {
		this.effects = effects;
	}

	public Long getFlags() {
		return flags;
	}

	public void setFlags(Long flags) {
		this.flags = flags;
	}

	public Long getOffensiveFlags() {
		return offensiveFlags;
	}

	public void setOffensiveFlags(Long offensiveFlags) {
		this.offensiveFlags = offensiveFlags;
	}

	public Long getDefensiveFlags() {
		return defensiveFlags;
	}

	public void setDefensiveFlags(Long defensiveFlags) {
		this.defensiveFlags = defensiveFlags;
	}

	public boolean isSingleTarget() {
		return singleTarget;
	}

	public void setSingleTarget(boolean singleTarget) {
		this.singleTarget = singleTarget;
	}

}
